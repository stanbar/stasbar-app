{"version":3,"sources":["webpack:///./src/pages/quotes.tsx"],"names":["Quotes","state","quotes","Array","loading","componentDidMount","this","fetchQuotes","render","classes","props","className","root","item","sm","variant","map","quote","cardQuote","text","author","Api","fetchAllQuotes","setState","console","error","Component","withStyles","theme","createStyles","width","marginLeft","spacing","unit","marginRight","breakpoints","up","display","flexWrap","flexGrow","flexDirection","justifyContent","overflow","padding","textDecoration","margin"],"mappings":"uLA8BA,IAoCMA,E,4JAEGC,MAAsB,CAC3BC,OAAQ,IAAIC,MACZC,SAAS,G,oHAGXC,kBAAA,WACEC,KAAKC,e,EAGAC,OAAP,WAAgB,IACPC,EAAWH,KAAKI,MAAhBD,QADO,EAEYH,KAAKL,MAAxBC,EAFO,EAEPA,OAAQE,EAFD,EAECA,QACf,OACE,uBAAKO,UAAWF,EAAQG,MAErBR,GAAW,gBAAC,IAAD,CAAMS,MAAM,EAAMC,GAAI,IAC9B,gBAAC,IAAD,CAAYC,QAAQ,MAApB,eAGHb,EAAOc,KAAI,SAACC,GAAD,OACV,gBAAC,IAAD,CAAMN,UAAWF,EAAQS,WACvB,gBAAC,IAAD,CAAYH,QAAQ,SACjBE,EAAME,KADT,KACiBF,EAAMG,c,EAQnBb,YAAd,sHAEkCc,IAAIC,kBAFtC,OAEUpB,EAFV,OAGII,KAAKiB,SAAS,CAACrB,SAAQE,SAAS,IAHpC,gDAKIoB,QAAQC,MAAR,MACAnB,KAAKiB,SAAS,CAACnB,SAAS,IAN5B,yD,GAhCmBsB,aA4CNC,gCAhFA,SAACC,GAAD,aAAkBC,uBAAa,CAC5CjB,MAAI,GACFkB,MAAO,OACPC,WAAiC,EAArBH,EAAMI,QAAQC,KAC1BC,YAAkC,EAArBN,EAAMI,QAAQC,MAHzB,EAIDL,EAAMO,YAAYC,GAAG,KAA4B,EAArBR,EAAMI,QAAQC,KAAW,IAAK,CACzDH,MAAO,KACPC,WAAY,OACZG,YAAa,QAPb,EAUFG,QAAS,OAVP,EAWFC,SAAU,OAXR,EAYFC,SAAU,EAZR,EAaFC,cAAe,SAbb,EAcFC,eAAgB,eAdd,EAeFC,SAAU,SAfR,EAgBFC,QAAiC,EAArBf,EAAMI,QAAQC,KAhBxB,UAkBJf,UAAW,CACT0B,eAAgB,OAChBC,OAAWjB,EAAMI,QAAQC,KAAnB,OACNU,QAAYf,EAAMI,QAAQC,KAAnB,UA0DIN,CAAmB3B","file":"component---src-pages-quotes-tsx-aa392beb1479ad80637e.js","sourcesContent":["/*\n * Copyright 2019 Stanislaw stasbar Baranski\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *          __             __\n *    _____/ /_____ ______/ /_  ____ ______\n *   / ___/ __/ __ `/ ___/ __ \\/ __ `/ ___/\n *  (__  ) /_/ /_/ (__  ) /_/ / /_/ / /\n * /____/\\__/\\__,_/____/_.___/\\__,_/_/\n *            stasbar@stasbar.com\n */\n\nimport {Card, createStyles, Grid, Theme, Typography, WithStyles, withStyles} from \"@material-ui/core\";\nimport * as React from \"react\";\nimport {Component} from \"react\";\nimport Api from \"../Api\";\nimport Quote from \"../models/Quote\";\n\nconst styles = (theme: Theme) => createStyles({\n  root: {\n    width: 'auto',\n    marginLeft: theme.spacing.unit * 3,\n    marginRight: theme.spacing.unit * 3,\n    [theme.breakpoints.up(1100 + theme.spacing.unit * 3 * 2)]: {\n      width: 1100,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    flexGrow: 1,\n    flexDirection: \"column\",\n    justifyContent: \"space-around\",\n    overflow: \"hidden\",\n    padding: `${theme.spacing.unit * 8}px 0`,\n  },\n  cardQuote: {\n    textDecoration: \"none\",\n    margin: `${theme.spacing.unit}px 0`,\n    padding: `${theme.spacing.unit}px`,\n  }\n});\n\n\ninterface IQuotesProps {\n\n}\n\ninterface IQuotesState {\n  quotes: Quote[];\n  loading: boolean;\n}\n\nclass Quotes extends Component<WithStyles<typeof styles>, IQuotesState> {\n\n  public state: IQuotesState = {\n    quotes: new Array<Quote>(),\n    loading: true\n  };\n\n  componentDidMount(): void {\n    this.fetchQuotes();\n  }\n\n  public render() {\n    const {classes} = this.props;\n    const {quotes, loading} = this.state;\n    return (\n      <div className={classes.root}>\n\n        {loading && <Grid item={true} sm={12}>\n            <Typography variant=\"h5\">Loading...</Typography>\n        </Grid>\n        }\n        {quotes.map((quote: Quote) =>\n          <Card className={classes.cardQuote}>\n            <Typography variant=\"body1\">\n              {quote.text} ~{quote.author}\n            </Typography>\n          </Card>\n        )}\n      </div>\n    );\n  }\n\n  private async fetchQuotes() {\n    try {\n      const quotes: Quote[] = await Api.fetchAllQuotes();\n      this.setState({quotes, loading: false});\n    } catch (e) {\n      console.error(e);\n      this.setState({loading: false});\n\n    }\n  }\n}\n\nexport default withStyles(styles)(Quotes)\n"],"sourceRoot":""}