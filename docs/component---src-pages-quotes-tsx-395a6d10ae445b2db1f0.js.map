{"version":3,"sources":["webpack:///./src/pages/quotes.tsx"],"names":["Quotes","state","quotes","Array","loading","componentDidMount","this","fetchQuotes","render","classes","props","className","root","item","sm","variant","map","quote","cardQuote","key","hash","text","author","Api","fetchAllQuotes","setState","console","error","Component","withStyles","theme","createStyles","minHeight","width","marginLeft","spacing","marginRight","breakpoints","up","display","flexWrap","flexGrow","flexDirection","justifyContent","overflow","padding","textDecoration","margin"],"mappings":"2NAsCA,IAmCMA,E,4JACGC,MAAsB,CAC3BC,OAAQ,IAAIC,MACZC,SAAS,G,oHAGXC,kBAAA,WACEC,KAAKC,e,EAGAC,OAAP,WAAgB,IACNC,EAAYH,KAAKI,MAAjBD,QADM,EAEcH,KAAKL,MAAzBC,EAFM,EAENA,OAAQE,EAFF,EAEEA,QAChB,OACE,uBAAKO,UAAWF,EAAQG,MACrBR,GACC,gBAAC,IAAD,CAAMS,MAAM,EAAMC,GAAI,IACpB,gBAAC,IAAD,CAAYC,QAAQ,MAApB,eAGHb,EAAOc,KAAI,SAACC,GAAD,OACV,gBAAC,IAAD,CAAMN,UAAWF,EAAQS,UAAWC,IAAKF,EAAMG,MAC7C,gBAAC,IAAD,CAAYL,QAAQ,SACjBE,EAAMI,KADT,KACiBJ,EAAMK,c,EAQnBf,YAAd,sHAEkCgB,IAAIC,kBAFtC,OAEUtB,EAFV,OAGII,KAAKmB,SAAS,CAAEvB,SAAQE,SAAS,IAHrC,gDAKIsB,QAAQC,MAAR,MACArB,KAAKmB,SAAS,CAAErB,SAAS,IAN7B,yD,GA/BmBwB,aA0CNC,uBA7EA,SAACC,GAAD,aACbC,YAAa,CACXnB,MAAI,GACFoB,UAAW,QACXC,MAAO,OACPC,WAAYJ,EAAMK,QAAQ,GAC1BC,YAAaN,EAAMK,QAAQ,IAJzB,EAKDL,EAAMO,YAAYC,GAAG,KAAOR,EAAMK,QAAQ,KAAM,CAC/CF,MAAO,KACPC,WAAY,OACZE,YAAa,QARb,EAWFG,QAAS,OAXP,EAYFC,SAAU,OAZR,EAaFC,SAAU,EAbR,EAcFC,cAAe,SAdb,EAeFC,eAAgB,eAfd,EAgBFC,SAAU,SAhBR,EAiBFC,QAAYf,EAAMK,QAAQ,GAjBxB,UAmBJjB,UAAW,CACT4B,eAAgB,OAChBC,OAAWjB,EAAMK,QAAQ,GAAnB,OACNU,QAAYf,EAAMK,QAAQ,GAAnB,UAqDEN,CAAmB7B","file":"component---src-pages-quotes-tsx-395a6d10ae445b2db1f0.js","sourcesContent":["/*\n * Copyright 2019 Stanislaw stasbar Baranski\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n *          __             __\n *    _____/ /_____ ______/ /_  ____ ______\n *   / ___/ __/ __ `/ ___/ __ \\/ __ `/ ___/\n *  (__  ) /_/ /_/ (__  ) /_/ / /_/ / /\n * /____/\\__/\\__,_/____/_.___/\\__,_/_/\n *            stasbar@stasbar.com\n */\n\nimport {\n  Card,\n  createStyles,\n  Grid,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles\n} from \"@material-ui/core\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport Api from \"../Api\";\nimport Quote from \"../models/Quote\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      minHeight: \"100vh\",\n      width: \"auto\",\n      marginLeft: theme.spacing(3),\n      marginRight: theme.spacing(3),\n      [theme.breakpoints.up(1100 + theme.spacing(6))]: {\n        width: 1100,\n        marginLeft: \"auto\",\n        marginRight: \"auto\"\n      },\n\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      flexGrow: 1,\n      flexDirection: \"column\",\n      justifyContent: \"space-around\",\n      overflow: \"hidden\",\n      padding: `${theme.spacing(8)}px 0`\n    },\n    cardQuote: {\n      textDecoration: \"none\",\n      margin: `${theme.spacing(1)}px 0`,\n      padding: `${theme.spacing(1)}px`\n    }\n  });\n\ninterface IQuotesProps {}\n\ninterface IQuotesState {\n  quotes: Quote[];\n  loading: boolean;\n}\n\nclass Quotes extends Component<WithStyles<typeof styles>, IQuotesState> {\n  public state: IQuotesState = {\n    quotes: new Array<Quote>(),\n    loading: true\n  };\n\n  componentDidMount(): void {\n    this.fetchQuotes();\n  }\n\n  public render() {\n    const { classes } = this.props;\n    const { quotes, loading } = this.state;\n    return (\n      <div className={classes.root}>\n        {loading && (\n          <Grid item={true} sm={12}>\n            <Typography variant=\"h5\">Loading...</Typography>\n          </Grid>\n        )}\n        {quotes.map((quote: Quote) => (\n          <Card className={classes.cardQuote} key={quote.hash}>\n            <Typography variant=\"body1\">\n              {quote.text} ~{quote.author}\n            </Typography>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  private async fetchQuotes() {\n    try {\n      const quotes: Quote[] = await Api.fetchAllQuotes();\n      this.setState({ quotes, loading: false });\n    } catch (e) {\n      console.error(e);\n      this.setState({ loading: false });\n    }\n  }\n}\n\nexport default withStyles(styles)(Quotes);\n"],"sourceRoot":""}